'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
// TODO: test for invalid url
// TODO: authentication and secret keys
// TODO: should not directly send the requestID
/**
 * Creates a response buffer
 * @param {Number} requestBufferLimit the size of the buffer
 * @param {Number} ttl the maximum time (in milliseconds) to live for each async
 *                     task
 */
var createResponseBuffer = function createResponseBuffer(requestBufferLimit, ttl) {
  var responseBuffer = {
    _buffer: {}
  };
  var requestIDs = Array(requestBufferLimit).fill(0).map(function (value, index) {
    return index;
  });

  // Removes the timedout buffered responses from the response buffer
  responseBuffer.clean = function () {
    var now = Date.now();
    var buffer = responseBuffer._buffer;
    Object.keys(buffer).forEach(function (requestID) {
      if (now - buffer[requestID].creationTime > ttl) {
        delete buffer[requestID];
      }
    });
  };

  // Gets the id of an available slot in the buffer
  responseBuffer.getNewID = function () {
    responseBuffer.clean();

    var buffer = responseBuffer._buffer;

    return requestIDs.find(function (id) {
      return !(id in buffer);
    });
  };

  // Pushes a new bufferedResponse into the responseBuffer
  responseBuffer.push = function (requestID, bufferedResponse) {
    responseBuffer._buffer[requestID] = bufferedResponse;
  };

  // Gets an existing bufferedResponse from the responseBuffer
  responseBuffer.get = function (requestID) {
    return responseBuffer._buffer[requestID];
  };

  // Deletes an existing bufferedResponse from the responseBuffer
  responseBuffer.remove = function (requestID) {
    return delete responseBuffer._buffer[requestID];
  };

  return responseBuffer;
};

// Create a buffered response to be added to the response buffer
var createBufferedResponse = function createBufferedResponse() {
  var bufferedResponse = {
    completed: false,
    succeeded: false,
    response: null,
    error: null,
    creationTime: Date.now()
    // Called once the underlying async task succeeds
  };bufferedResponse.resolve = function (response) {
    bufferedResponse.completed = true;
    bufferedResponse.succeeded = true;
    bufferedResponse.response = response;
  };
  // Called once the underlying async task fails
  bufferedResponse.reject = function (error) {
    bufferedResponse.completed = true;
    bufferedResponse.succeeded = false;
    bufferedResponse.error = error;
  };

  return bufferedResponse;
};

// Set the relevant method into the response object
var decorateResponseObject = function decorateResponseObject(res, bufferedResponse) {
  res.setBufferedResponse = function (asyncTask) {
    if (!asyncTask.then || !asyncTask.catch) {
      // If the underlying task is not asynchronous, the throw an error
      throw new Error('Task must be a promise');
    }
    asyncTask.then(bufferedResponse.resolve).catch(bufferedResponse.reject);
  };
};

var handleRequestForNewTask = function handleRequestForNewTask(res, next, responseBuffer) {
  var requestID = responseBuffer.getNewID();

  if (requestID === undefined) {
    res.status(503).json({ error: 'Request queue is overloaded.' });
  } else {
    var bufferedResponse = createBufferedResponse();

    responseBuffer.push(requestID, bufferedResponse);
    decorateResponseObject(res, bufferedResponse);
    next();
    res.status(202).json({ requestID: requestID });
  }
};

var handleRequestForBufferedTask = function handleRequestForBufferedTask(requestID, res, responseBuffer) {
  var bufferedResponse = responseBuffer.get(requestID);

  if (bufferedResponse) {
    if (bufferedResponse.completed) {
      responseBuffer.remove(requestID);

      if (bufferedResponse.succeeded) {
        // TODO: test for cases where response is not an object
        res.status(200).json(bufferedResponse.response);
      } else {
        res.status(500).json(bufferedResponse.error);
      }
    } else {
      res.sendStatus(202);
    }
  } else {
    res.sendStatus(404);
  }
};

/**
 * The RequestBuffer middleware
 * @param {Number} requestBufferLimit the size of the buffer
 * @param {Number} ttl the maximum time (in milliseconds) to live for each async
 *               task
 */

exports.default = function (_ref) {
  var requestBufferLimit = _ref.requestBufferLimit,
      ttl = _ref.ttl;

  var responseBuffer = createResponseBuffer(requestBufferLimit, ttl);

  return function (req, res, next) {
    if (req.body.requestID === undefined) {
      handleRequestForNewTask(res, next, responseBuffer);
    } else {
      var requestID = req.body.requestID;

      handleRequestForBufferedTask(requestID, res, responseBuffer);
    }
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,