'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
// implement timeout
// test for invalid url
// authentication and secret keys
// test if response changes
// should not directly send the requestID
/**
 * Creates a response buffer
 * @param Number requestBufferLimit the size of the buffer
 * @param {Number} ttl the maximum time (in milliseconds) to live for each async
 *                     task
 */
var createResponseBuffer = function createResponseBuffer(requestBufferLimit, ttl) {
  var responseBuffer = {
    _buffer: {}
  };
  var requestIDs = Array(requestBufferLimit).fill(0).map(function (value, index) {
    return index;
  });

  // Removes resolved and timedout buffered responses
  // from the response buffer
  responseBuffer.clean = function () {
    var now = Date.now();
    var buffer = responseBuffer._buffer;
    Object.keys(buffer).forEach(function (requestID) {
      if (now - buffer[requestID].creationTime > ttl) {
        delete buffer[requestID];
      }
    });
  };

  // Gets the id of an available slot in the buffer
  responseBuffer.getNewID = function () {
    responseBuffer.clean();

    var buffer = responseBuffer._buffer;

    return requestIDs.find(function (id) {
      return !(id in buffer);
    });
  };

  // Pushes a new bufferedResponse into the responseBuffer
  responseBuffer.push = function (requestID, bufferedResponse) {
    responseBuffer._buffer[requestID] = bufferedResponse;
  };

  // Pops an existing bufferedResponse from the responseBuffer
  responseBuffer.get = function (requestID) {
    return responseBuffer._buffer[requestID];
  };

  // Pops an existing bufferedResponse from the responseBuffer
  responseBuffer.remove = function (requestID) {
    return delete responseBuffer._buffer[requestID];
  };

  return responseBuffer;
};

// Create a buffered response to be added to the response buffer
var createBufferedResponse = function createBufferedResponse() {
  var bufferedResponse = {
    completed: false,
    succeeded: false,
    response: null,
    error: null,
    creationTime: Date.now()
    // Called once the underlying async task succeeds
  };bufferedResponse.resolve = function (response) {
    bufferedResponse.completed = true;
    bufferedResponse.succeeded = true;
    bufferedResponse.response = response;
  };
  // Called once the underlying async task fails
  bufferedResponse.reject = function (error) {
    bufferedResponse.completed = true;
    bufferedResponse.succeeded = false;
    bufferedResponse.error = error;
  };

  return bufferedResponse;
};

// Set the relevant method into the response object
var decorateResponseObject = function decorateResponseObject(res, bufferedResponse) {
  res.setBufferedResponse = function (asyncTask) {
    if (!asyncTask.then || !asyncTask.catch) {
      // If the underlying task is not asynchronous, the throw an error
      throw new Error('Task must be a promise');
    }
    asyncTask.then(bufferedResponse.resolve).catch(bufferedResponse.reject);
  };
};

var handleRequestForNewTask = function handleRequestForNewTask(res, next, responseBuffer) {
  var requestID = responseBuffer.getNewID();

  if (requestID === undefined) {
    res.status(503).json({ error: 'Request queue is overloaded.' });
  } else {
    var bufferedResponse = createBufferedResponse();

    responseBuffer.push(requestID, bufferedResponse);
    decorateResponseObject(res, bufferedResponse);
    next();
    res.status(202).json({ requestID: requestID });
  }
};

var handleRequestForBufferedTask = function handleRequestForBufferedTask(requestID, res, responseBuffer) {
  var bufferedResponse = responseBuffer.get(requestID);

  if (bufferedResponse) {
    if (bufferedResponse.completed) {
      responseBuffer.remove(requestID);

      if (bufferedResponse.succeeded) {
        // test for cases where response is not an object
        res.status(200).json(bufferedResponse.response);
      } else {
        res.status(500).json(bufferedResponse.error);
      }
    } else {
      res.sendStatus(202);
    }
  } else {
    res.sendStatus(404);
  }
};

/**
 * The RequestBuffer middleware
 * @param Number requestBufferLimit the size of the buffer
 * @param Number ttl the maximum time (in milliseconds) to live for each async
 *               task
 */

exports.default = function (_ref) {
  var requestBufferLimit = _ref.requestBufferLimit,
      ttl = _ref.ttl;

  var responseBuffer = createResponseBuffer(requestBufferLimit, ttl);

  return function (req, res, next) {
    if (req.body.requestID === undefined) {
      handleRequestForNewTask(res, next, responseBuffer);
    } else {
      var requestID = req.body.requestID;

      handleRequestForBufferedTask(requestID, res, responseBuffer);
    }
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tYWluL21pZGRsZXdhcmVzL3JlcXVlc3RCdWZmZXIuanMiXSwibmFtZXMiOlsiY3JlYXRlUmVzcG9uc2VCdWZmZXIiLCJyZXF1ZXN0QnVmZmVyTGltaXQiLCJ0dGwiLCJyZXNwb25zZUJ1ZmZlciIsIl9idWZmZXIiLCJyZXF1ZXN0SURzIiwiQXJyYXkiLCJmaWxsIiwibWFwIiwidmFsdWUiLCJpbmRleCIsImNsZWFuIiwibm93IiwiRGF0ZSIsImJ1ZmZlciIsIk9iamVjdCIsImtleXMiLCJmb3JFYWNoIiwicmVxdWVzdElEIiwiY3JlYXRpb25UaW1lIiwiZ2V0TmV3SUQiLCJmaW5kIiwiaWQiLCJwdXNoIiwiYnVmZmVyZWRSZXNwb25zZSIsImdldCIsInJlbW92ZSIsImNyZWF0ZUJ1ZmZlcmVkUmVzcG9uc2UiLCJjb21wbGV0ZWQiLCJzdWNjZWVkZWQiLCJyZXNwb25zZSIsImVycm9yIiwicmVzb2x2ZSIsInJlamVjdCIsImRlY29yYXRlUmVzcG9uc2VPYmplY3QiLCJyZXMiLCJzZXRCdWZmZXJlZFJlc3BvbnNlIiwiYXN5bmNUYXNrIiwidGhlbiIsImNhdGNoIiwiRXJyb3IiLCJoYW5kbGVSZXF1ZXN0Rm9yTmV3VGFzayIsIm5leHQiLCJ1bmRlZmluZWQiLCJzdGF0dXMiLCJqc29uIiwiaGFuZGxlUmVxdWVzdEZvckJ1ZmZlcmVkVGFzayIsInNlbmRTdGF0dXMiLCJyZXEiLCJib2R5Il0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7O0FBTUEsSUFBTUEsdUJBQXVCLFNBQXZCQSxvQkFBdUIsQ0FBQ0Msa0JBQUQsRUFBcUJDLEdBQXJCLEVBQTZCO0FBQ3hELE1BQU1DLGlCQUFpQjtBQUNyQkMsYUFBUztBQURZLEdBQXZCO0FBR0EsTUFBTUMsYUFBYUMsTUFBTUwsa0JBQU4sRUFBMEJNLElBQTFCLENBQStCLENBQS9CLEVBQ2hCQyxHQURnQixDQUNaLFVBQUNDLEtBQUQsRUFBUUMsS0FB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Qjs7QUFFQSxTQUFPLFVBQUM4QyxHQUFELEVBQU1iLEdBQU4sRUFBV08sSUFBWCxFQUFvQjtBQUN6QixRQUFJTSxJQUFJQyxJQUFKLENBQVMvQixTQUFULEtBQXVCeUIsU0FBM0IsRUFBc0M7QUFDcENGLDhCQUF3Qk4sR0FBeEIsRUFBNkJPLElBQTdCLEVBQW1DdkMsY0FBbkM7QUFDRCxLQUZELE1BRU87QUFDTCxVQUFNZSxZQUFZOEIsSUFBSUMsSUFBSixDQUFTL0IsU0FBM0I7O0FBRUE0QixtQ0FBNkI1QixTQUE3QixFQUF3Q2lCLEdBQXhDLEVBQTZDaEMsY0FBN0M7QUFDRDtBQUNGLEdBUkQ7QUFTRCxDIiwiZmlsZSI6InJlcXVlc3RCdWZmZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBsZW1lbnQgdGltZW91dFxuLy8gdGVzdCBmb3IgaW52YWxpZCB1cmxcbi8vIGF1dGhlbnRpY2F0aW9uIGFuZCBzZWNyZXQga2V5c1xuLy8gdGVzdCBpZiByZXNwb25zZSBjaGFuZ2VzXG4vLyBzaG91bGQgbm90IGRpcmVjdGx5IHNlbmQgdGhlIHJlcXVlc3RJRFxuLyoqXG4gKiBDcmVhdGVzIGEgcmVzcG9uc2UgYnVmZmVyXG4gKiBAcGFyYW0gTnVtYmVyIHJlcXVlc3RCdWZmZXJMaW1pdCB0aGUgc2l6ZSBvZiB0aGUgYnVmZmVyXG4gKiBAcGFyYW0ge051bWJlcn0gdHRsIHRoZSBtYXhpbXVtIHRpbWUgKGluIG1pbGxpc2Vjb25kcykgdG8gbGl2ZSBmb3IgZWFjaCBhc3luY1xuICogICAgICAgICAgICAgICAgICAgICB0YXNrXG4gKi9cbmNvbnN0IGNyZWF0ZVJlc3BvbnNlQnVmZmVyID0gKHJlcXVlc3RCdWZmZXJMaW1pdCwgdHRsKSA9PiB7XG4gIGNvbnN0IHJlc3BvbnNlQnVmZmVyID0ge1xuICAgIF9idWZmZXI6IHt9XG4gIH1cbiAgY29uc3QgcmVxdWVzdElEcyA9IEFycmF5KHJlcXVlc3RCdWZmZXJMaW1pdCkuZmlsbCgwKVxuICAgIC5tYXAoKHZhbHVlLCBpbmRleCkgPT4gaW5kZXgpXG5cbiAgLy8gUmVtb3ZlcyByZXNvbHZlZCBhbmQgdGltZWRvdXQgYnVmZmVyZWQgcmVzcG9uc2VzXG4gIC8vIGZyb20gdGhlIHJlc3BvbnNlIGJ1ZmZlclxuICByZXNwb25zZUJ1ZmZlci5jbGVhbiA9ICgpID0+IHtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpXG4gICAgY29uc3QgYnVmZmVyID0gcmVzcG9uc2VCdWZmZXIuX2J1ZmZlclxuICAgIE9iamVjdC5rZXlzKGJ1ZmZlcikuZm9yRWFjaChyZXF1ZXN0SUQgPT4ge1xuICAgICAgaWYgKG5vdyAtIGJ1ZmZlcltyZXF1ZXN0SURdLmNyZWF0aW9uVGltZSA+IHR0bCkge1xuICAgICAgICBkZWxldGUgYnVmZmVyW3JlcXVlc3RJRF1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLy8gR2V0cyB0aGUgaWQgb2YgYW4gYXZhaWxhYmxlIHNsb3QgaW4gdGhlIGJ1ZmZlclxuICByZXNwb25zZUJ1ZmZlci5nZXROZXdJRCA9ICgpID0+IHtcbiAgICByZXNwb25zZUJ1ZmZlci5jbGVhbigpXG5cbiAgICBjb25zdCBidWZmZXIgPSByZXNwb25zZUJ1ZmZlci5fYnVmZmVyXG5cbiAgICByZXR1cm4gcmVxdWVzdElEcy5maW5kKGlkID0+ICEoaWQgaW4gYnVmZmVyKSlcbiAgfVxuXG4gIC8vIFB1c2hlcyBhIG5ldyBidWZmZXJlZFJlc3BvbnNlIGludG8gdGhlIHJlc3BvbnNlQnVmZmVyXG4gIHJlc3BvbnNlQnVmZmVyLnB1c2ggPSAocmVxdWVzdElELCBidWZmZXJlZFJlc3BvbnNlKSA9PiB7XG4gICAgcmVzcG9uc2VCdWZmZXIuX2J1ZmZlcltyZXF1ZXN0SURdID0gYnVmZmVyZWRSZXNwb25zZVxuICB9XG5cbiAgLy8gUG9wcyBhbiBleGlzdGluZyBidWZmZXJlZFJlc3BvbnNlIGZyb20gdGhlIHJlc3BvbnNlQnVmZmVyXG4gIHJlc3BvbnNlQnVmZmVyLmdldCA9IChyZXF1ZXN0SUQpID0+IHJlc3BvbnNlQnVmZmVyLl9idWZmZXJbcmVxdWVzdElEXVxuXG4gIC8vIFBvcHMgYW4gZXhpc3RpbmcgYnVmZmVyZWRSZXNwb25zZSBmcm9tIHRoZSByZXNwb25zZUJ1ZmZlclxuICByZXNwb25zZUJ1ZmZlci5yZW1vdmUgPSAocmVxdWVzdElEKSA9PlxuICAgIGRlbGV0ZSByZXNwb25zZUJ1ZmZlci5fYnVmZmVyW3JlcXVlc3RJRF1cblxuICByZXR1cm4gcmVzcG9uc2VCdWZmZXJcbn1cblxuLy8gQ3JlYXRlIGEgYnVmZmVyZWQgcmVzcG9uc2UgdG8gYmUgYWRkZWQgdG8gdGhlIHJlc3BvbnNlIGJ1ZmZlclxuY29uc3QgY3JlYXRlQnVmZmVyZWRSZXNwb25zZSA9ICgpID0+IHtcbiAgY29uc3QgYnVmZmVyZWRSZXNwb25zZSA9IHtcbiAgICBjb21wbGV0ZWQ6IGZhbHNlLFxuICAgIHN1Y2NlZWRlZDogZmFsc2UsXG4gICAgcmVzcG9uc2U6IG51bGwsXG4gICAgZXJyb3I6IG51bGwsXG4gICAgY3JlYXRpb25UaW1lOiBEYXRlLm5vdygpXG4gIH1cbiAgLy8gQ2FsbGVkIG9uY2UgdGhlIHVuZGVybHlpbmcgYXN5bmMgdGFzayBzdWNjZWVkc1xuICBidWZmZXJlZFJlc3BvbnNlLnJlc29sdmUgPSAocmVzcG9uc2UpID0+IHtcbiAgICBidWZmZXJlZFJlc3BvbnNlLmNvbXBsZXRlZCA9IHRydWVcbiAgICBidWZmZXJlZFJlc3BvbnNlLnN1Y2NlZWRlZCA9IHRydWVcbiAgICBidWZmZXJlZFJlc3BvbnNlLnJlc3BvbnNlID0gcmVzcG9uc2VcbiAgfVxuICAvLyBDYWxsZWQgb25jZSB0aGUgdW5kZXJseWluZyBhc3luYyB0YXNrIGZhaWxzXG4gIGJ1ZmZlcmVkUmVzcG9uc2UucmVqZWN0ID0gKGVycm9yKSA9PiB7XG4gICAgYnVmZmVyZWRSZXNwb25zZS5jb21wbGV0ZWQgPSB0cnVlXG4gICAgYnVmZmVyZWRSZXNwb25zZS5zdWNjZWVkZWQgPSBmYWxzZVxuICAgIGJ1ZmZlcmVkUmVzcG9uc2UuZXJyb3IgPSBlcnJvclxuICB9XG5cbiAgcmV0dXJuIGJ1ZmZlcmVkUmVzcG9uc2Vcbn1cblxuLy8gU2V0IHRoZSByZWxldmFudCBtZXRob2QgaW50byB0aGUgcmVzcG9uc2Ugb2JqZWN0XG5jb25zdCBkZWNvcmF0ZVJlc3BvbnNlT2JqZWN0ID0gKHJlcywgYnVmZmVyZWRSZXNwb25zZSkgPT4ge1xuICByZXMuc2V0QnVmZmVyZWRSZXNwb25zZSA9IChhc3luY1Rhc2spID0+IHtcbiAgICBpZiAoIWFzeW5jVGFzay50aGVuIHx8ICFhc3luY1Rhc2suY2F0Y2gpIHtcbiAgICAgIC8vIElmIHRoZSB1bmRlcmx5aW5nIHRhc2sgaXMgbm90IGFzeW5jaHJvbm91cywgdGhlIHRocm93IGFuIGVycm9yXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Rhc2sgbXVzdCBiZSBhIHByb21pc2UnKVxuICAgIH1cbiAgICBhc3luY1Rhc2tcbiAgICAgIC50aGVuKGJ1ZmZlcmVkUmVzcG9uc2UucmVzb2x2ZSlcbiAgICAgIC5jYXRjaChidWZmZXJlZFJlc3BvbnNlLnJlamVjdClcbiAgfVxufVxuXG5jb25zdCBoYW5kbGVSZXF1ZXN0Rm9yTmV3VGFzayA9IChyZXMsIG5leHQsIHJlc3BvbnNlQnVmZmVyKSA9PiB7XG4gIGNvbnN0IHJlcXVlc3RJRCA9IHJlc3BvbnNlQnVmZmVyLmdldE5ld0lEKClcblxuICBpZiAocmVxdWVzdElEID09PSB1bmRlZmluZWQpIHtcbiAgICByZXMuc3RhdHVzKDUwMykuanNvbih7IGVycm9yOiAnUmVxdWVzdCBxdWV1ZSBpcyBvdmVybG9hZGVkLicgfSlcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBidWZmZXJlZFJlc3BvbnNlID0gY3JlYXRlQnVmZmVyZWRSZXNwb25zZSgpXG5cbiAgICByZXNwb25zZUJ1ZmZlci5wdXNoKHJlcXVlc3RJRCwgYnVmZmVyZWRSZXNwb25zZSlcbiAgICBkZWNvcmF0ZVJlc3BvbnNlT2JqZWN0KHJlcywgYnVmZmVyZWRSZXNwb25zZSlcbiAgICBuZXh0KClcbiAgICByZXMuc3RhdHVzKDIwMikuanNvbih7IHJlcXVlc3RJRCB9KVxuICB9XG59XG5cbmNvbnN0IGhhbmRsZVJlcXVlc3RGb3JCdWZmZXJlZFRhc2sgPSAocmVxdWVzdElELCByZXMsIHJlc3BvbnNlQnVmZmVyKSA9PiB7XG4gIGNvbnN0IGJ1ZmZlcmVkUmVzcG9uc2UgPSByZXNwb25zZUJ1ZmZlci5nZXQocmVxdWVzdElEKVxuXG4gIGlmIChidWZmZXJlZFJlc3BvbnNlKSB7XG4gICAgaWYgKGJ1ZmZlcmVkUmVzcG9uc2UuY29tcGxldGVkKSB7XG4gICAgICByZXNwb25zZUJ1ZmZlci5yZW1vdmUocmVxdWVzdElEKVxuXG4gICAgICBpZiAoYnVmZmVyZWRSZXNwb25zZS5zdWNjZWVkZWQpIHtcbiAgICAgICAgLy8gdGVzdCBmb3IgY2FzZXMgd2hlcmUgcmVzcG9uc2UgaXMgbm90IGFuIG9iamVjdFxuICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbihidWZmZXJlZFJlc3BvbnNlLnJlc3BvbnNlKVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzLnN0YXR1cyg1MDApLmpzb24oYnVmZmVyZWRSZXNwb25zZS5lcnJvcilcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzLnNlbmRTdGF0dXMoMjAyKVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICByZXMuc2VuZFN0YXR1cyg0MDQpXG4gIH1cbn1cblxuLyoqXG4gKiBUaGUgUmVxdWVzdEJ1ZmZlciBtaWRkbGV3YXJlXG4gKiBAcGFyYW0gTnVtYmVyIHJlcXVlc3RCdWZmZXJMaW1pdCB0aGUgc2l6ZSBvZiB0aGUgYnVmZmVyXG4gKiBAcGFyYW0gTnVtYmVyIHR0bCB0aGUgbWF4aW11bSB0aW1lIChpbiBtaWxsaXNlY29uZHMpIHRvIGxpdmUgZm9yIGVhY2ggYXN5bmNcbiAqICAgICAgICAgICAgICAgdGFza1xuICovXG5leHBvcnQgZGVmYXVsdCAoeyByZXF1ZXN0QnVmZmVyTGltaXQsIHR0bCB9KSA9PiB7XG4gIGNvbnN0IHJlc3BvbnNlQnVmZmVyID0gY3JlYXRlUmVzcG9uc2VCdWZmZXIocmVxdWVzdEJ1ZmZlckxpbWl0LCB0dGwpXG5cbiAgcmV0dXJuIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgIGlmIChyZXEuYm9keS5yZXF1ZXN0SUQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgaGFuZGxlUmVxdWVzdEZvck5ld1Rhc2socmVzLCBuZXh0LCByZXNwb25zZUJ1ZmZlcilcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcmVxdWVzdElEID0gcmVxLmJvZHkucmVxdWVzdElEXG5cbiAgICAgIGhhbmRsZVJlcXVlc3RGb3JCdWZmZXJlZFRhc2socmVxdWVzdElELCByZXMsIHJlc3BvbnNlQnVmZmVyKVxuICAgIH1cbiAgfVxufVxuIl19