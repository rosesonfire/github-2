'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
// Extracts only the required data set
var extract = function extract(_ref) {
  var jsonData = _ref.jsonData,
      baseUrl = _ref.baseUrl;

  var requiredData = jsonData.feed.entry.map(function (feedEntry) {
    var author = feedEntry.author[0];
    return {
      updateTime: new Date(Date.parse(feedEntry.updated[0])),
      event: feedEntry.id[0].split(':')[2].split('/')[0],
      author: {
        name: author.name[0],
        uri: author.uri[0].replace(baseUrl, '')
      }
    };
  });
  return requiredData;
};

// ETL's required data from endpoint to persistence

exports.default = function (_ref2) {
  var url = _ref2.url,
      getBaseUrl = _ref2.getBaseUrl,
      fetchData = _ref2.fetchData,
      convertXMLToJSON = _ref2.convertXMLToJSON,
      odm = _ref2.odm;
  return async function () {
    var baseUrl = await getBaseUrl(url);

    var _ref3 = await fetchData(url),
        data = _ref3.data;

    var jsonData = await convertXMLToJSON(data);
    var requiredDataSet = extract({ jsonData: jsonData, baseUrl: baseUrl });

    return Promise.all(requiredDataSet.map(function (requiredData) {
      return odm.create({ key: requiredData.author.uri, data: requiredData }).save();
    }));
  };
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9tYWluL3NlcnZpY2VzL3NjcmFwZS5qcyJdLCJuYW1lcyI6WyJleHRyYWN0IiwianNvbkRhdGEiLCJiYXNlVXJsIiwicmVxdWlyZWREYXRhIiwiZmVlZCIsImVudHJ5IiwibWFwIiwiYXV0aG9yIiwiZmVlZEVudHJ5IiwidXBkYXRlVGltZSIsIkRhdGUiLCJwYXJzZSIsInVwZGF0ZWQiLCJldmVudCIsImlkIiwic3BsaXQiLCJuYW1lIiwidXJpIiwicmVwbGFjZSIsInVybCIsImdldEJhc2VVcmwiLCJmZXRjaERhdGEiLCJjb252ZXJ0WE1MVG9KU09OIiwib2RtIiwiZGF0YSIsInJlcXVpcmVkRGF0YVNldCIsIlByb21pc2UiLCJhbGwiLCJjcmVhdGUiLCJrZXkiLCJzYXZlIl0sIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0EsSUFBTUEsVUFBVSxTQUFWQSxPQUFVLE9BQTJCO0FBQUEsTUFBeEJDLFFBQXdCLFFBQXhCQSxRQUF3QjtBQUFBLE1BQWRDLE9BQWMsUUFBZEEsT0FBYzs7QUFDekMsTUFBTUMsZUFBZUYsU0FBU0csSUFBVCxDQUFjQyxLQUFkLENBQW9CQyxHQUFwQixDQUF3QixxQkFBYTtBQUN4RCxRQUFNQyxTQUFTQyxVQUFVRCxNQUFWLENBQWlCLENBQWpCLENBQWY7QUFDQSxXQUFPO0FBQ0xFLGtCQUFZLElBQUlDLElBQUosQ0FBU0EsS0FBS0MsS0FBTCxDQUFXSCxVQUFVSSxPQUFWLENBQWtCLENBQWxCLENBQVgsQ0FBVCxDQURQO0FBRUxDLGFBQU9MLFVBQVVNLEVBQVYsQ0FBYSxDQUFiLEVBQWdCQyxLQUFoQixDQUFzQixHQUF0QixFQUEyQixDQUEzQixFQUE4QkEsS0FBOUIsQ0FBb0MsR0FBcEMsRUFBeUMsQ0FBekMsQ0FGRjtBQUdMUixjQUFRO0FBQ05TLGNBQU1ULE9BQU9TLElBQVAsQ0FBWSxDQUFaLENBREE7QUFFTkMsYUFBS1YsT0FBT1UsR0FBUCxDQUFXLENBQVgsRUFBY0MsT0FBZCxDQUFzQmhCLE9BQXRCLEVBQStCLEVBQS9CO0FBRkM7QUFISCxLQUFQO0FBUUQsR0FWb0IsQ0FBckI7QUFXQSxTQUFPQyxZQUFQO0FBQ0QsQ0FiRDs7QUFlQTs7a0JBQ2U7QUFBQSxNQUFHZ0IsR0FBSCxTQUFHQSxHQUFIO0FBQUEsTUFBUUMsVUFBUixTQUFRQSxVQUFSO0FBQUEsTUFBb0JDLFNBQXBCLFNBQW9CQSxTQUFwQjtBQUFBLE1BQStCQyxnQkFBL0IsU0FBK0JBLGdCQUEvQjtBQUFBLE1BQWlEQyxHQUFqRCxTQUFpREEsR0FBakQ7QUFBQSxTQUNiLGtCQUFZO0FBQ1YsUUFBTXJCLFVBQVUsTUFBTWtCLFdBQVdELEdBQVgsQ0FBdEI7O0FBRFUsZ0JBRU8sTUFBTUUsVUFBVUYsR0FBVixDQUZiO0FBQUEsUUFFRkssSUFGRSxTQUVGQSxJQUZFOztBQUdWLFFBQU12QixXQUFXLE1BQU1xQixpQkFBaUJFLElBQWpCLENBQXZCO0FBQ0EsUUFBTUMsa0JBQWtCekIsUUFBUSxFQUFFQyxrQkFBRixFQUFZQyxnQkFBWixFQUFSLENBQXhCOztBQUVBLFdBQU93QixRQUFRQyxHQUFSLENBQVlGLGdCQUFnQm5CLEdBQWhCLENBQW9CO0FBQUEsYUFDckNpQixJQUFJSyxNQUFKLENBQVcsRUFBRUMsS0FBSzFCLGFBQWFJLE1BQWIsQ0FBb0JVLEdBQTNCLEVBQWdDTyxNQUFNckIsWUFBdEMsRUFBWCxFQUFpRTJCLElBQWpFLEVBRHFDO0FBQUEsS0FBcEIsQ0FBWixDQUFQO0FBRUQsR0FUWTtBQUFBLEMiLCJmaWxlIjoic2NyYXBlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gRXh0cmFjdHMgb25seSB0aGUgcmVxdWlyZWQgZGF0YSBzZXRcbmNvbnN0IGV4dHJhY3QgPSAoeyBqc29uRGF0YSwgYmFzZVVybCB9KSA9PiB7XG4gIGNvbnN0IHJlcXVpcmVkRGF0YSA9IGpzb25EYXRhLmZlZWQuZW50cnkubWFwKGZlZWRFbnRyeSA9PiB7XG4gICAgY29uc3QgYXV0aG9yID0gZmVlZEVudHJ5LmF1dGhvclswXVxuICAgIHJldHVybiB7XG4gICAgICB1cGRhdGVUaW1lOiBuZXcgRGF0ZShEYXRlLnBhcnNlKGZlZWRFbnRyeS51cGRhdGVkWzBdKSksXG4gICAgICBldmVudDogZmVlZEVudHJ5LmlkWzBdLnNwbGl0KCc6JylbMl0uc3BsaXQoJy8nKVswXSxcbiAgICAgIGF1dGhvcjoge1xuICAgICAgICBuYW1lOiBhdXRob3IubmFtZVswXSxcbiAgICAgICAgdXJpOiBhdXRob3IudXJpWzBdLnJlcGxhY2UoYmFzZVVybCwgJycpXG4gICAgICB9XG4gICAgfVxuICB9KVxuICByZXR1cm4gcmVxdWlyZWREYXRhXG59XG5cbi8vIEVUTCdzIHJlcXVpcmVkIGRhdGEgZnJvbSBlbmRwb2ludCB0byBwZXJzaXN0ZW5jZVxuZXhwb3J0IGRlZmF1bHQgKHsgdXJsLCBnZXRCYXNlVXJsLCBmZXRjaERhdGEsIGNvbnZlcnRYTUxUb0pTT04sIG9kbSB9KSA9PlxuICBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgYmFzZVVybCA9IGF3YWl0IGdldEJhc2VVcmwodXJsKVxuICAgIGNvbnN0IHsgZGF0YSB9ID0gYXdhaXQgZmV0Y2hEYXRhKHVybClcbiAgICBjb25zdCBqc29uRGF0YSA9IGF3YWl0IGNvbnZlcnRYTUxUb0pTT04oZGF0YSlcbiAgICBjb25zdCByZXF1aXJlZERhdGFTZXQgPSBleHRyYWN0KHsganNvbkRhdGEsIGJhc2VVcmwgfSlcblxuICAgIHJldHVybiBQcm9taXNlLmFsbChyZXF1aXJlZERhdGFTZXQubWFwKHJlcXVpcmVkRGF0YSA9PlxuICAgICAgb2RtLmNyZWF0ZSh7IGtleTogcmVxdWlyZWREYXRhLmF1dGhvci51cmksIGRhdGE6IHJlcXVpcmVkRGF0YSB9KS5zYXZlKCkpKVxuICB9XG4iXX0=